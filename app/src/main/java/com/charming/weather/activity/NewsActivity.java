/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */

package com.charming.weather.activity;

import android.content.Intent;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.charming.weather.R;
import com.charming.weather.adapter.NewsListAdapter;
import com.charming.weather.comminterface.OnResponseCallback;
import com.charming.weather.entity.news.Data;
import com.charming.weather.entity.news.Result;
import com.charming.weather.presenter.NewsPresenter;
import com.charming.weather.util.ApplicationUtil;
import com.charming.weather.util.BitmapCache;

import java.io.IOException;
import java.util.List;
import java.util.Map;

public class NewsActivity extends AppCompatActivity implements View.OnClickListener {
    private static final String TAG = "NewsActivity";
    String[] mChannels;
    String[] mChannelsEn;
    private boolean isLight;
    private ListView listView;
    private NewsListAdapter mAdapter;
    private BitmapCache mBitmapCache;
    private Map<String, Object> mNewsData;
    private String mNewsType;
    private SwipeRefreshLayout mRefresh;
    private NewsPresenter mPresenter;


    public NewsActivity() {
        isLight = true;
    }

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ApplicationUtil.setStrictMode();
        mChannels = getResources().getStringArray(R.array.news_channel);
        mChannelsEn = getResources().getStringArray(R.array.news_channel_en);
        mNewsType = getIntent().getStringExtra("news_type");
        setContentView(R.layout.activity_news);
        init();
        mPresenter = new NewsPresenter(this);
        mPresenter.setOnResponseCallback(new OnResponseCallback() {
            public void onResponseSuccess(Object response) {
                if (mRefresh.isRefreshing()) {
                    mRefresh.setRefreshing(false);
                }
                findViewById(R.id.error_refresh).setVisibility(View.GONE);
                mNewsData = (Map<String, Object>) response;
                if (listView.getAdapter() == null) {
                    listView.setAdapter(mAdapter);
                }
                mAdapter.setData(mNewsData);
                mAdapter.notifyDataSetChanged();
            }

            public void onResponseError(Exception e) {
                View errorView = findViewById(R.id.error_refresh);
                errorView.setVisibility(View.VISIBLE);
                errorView.setOnClickListener(NewsActivity.this);
            }
        });
        mPresenter.setChannel(getNewsChannel(mNewsType));
        mPresenter.startPresent();
    }

    private void init() {
        mRefresh = (SwipeRefreshLayout) findViewById(R.id.news_refresh);
        mRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {

            public void onRefresh() {
                mPresenter.startPresent();
            }
        });
        findViewById(R.id.btn_back).setOnClickListener(this);
        TextView titleText = (TextView) findViewById(R.id.title_text);
        titleText.setText(mNewsType);
        listView = (ListView) findViewById(R.id.news_list);
        final View header = getLayoutInflater().inflate(R.layout.activity_news_list_header, null);
        ((ImageView) header.findViewById(R.id.header_background)).setImageResource(getHeaderIconId(mNewsType));
        ((ImageView) header.findViewById(R.id.header_icon)).setImageResource(getNewsIconId(mNewsType));
        ((TextView) header.findViewById(R.id.tips_title)).setText(mNewsType);
        ((TextView) header.findViewById(R.id.tips_content)).setText(getNewsDescription(mNewsType));
        mAdapter = new NewsListAdapter(this);
        mBitmapCache = new BitmapCache(this);
        mAdapter.setBitmapCache(mBitmapCache);
        listView.addHeaderView(header);
        listView.addFooterView(getLayoutInflater().inflate(R.layout.activity_foot_on_divider, null));
        listView.setDivider(null);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if ((position != 0) && (position != (mAdapter.getCount() + 1))) {
                    Log.i("NewsActivity", "onItemClick: " + mAdapter.getCount());
                    Intent intent = new Intent(NewsActivity.this, NewsDetailsActivity.class);
                    Result result = (Result) mNewsData.get("result");
                    List<Data> datas = result.getData();
                    intent.setData(Uri.parse(datas.get(position - 1).getUrl()));
                    startActivity(intent);
                }
            }
        });
        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
            public void onScrollStateChanged(AbsListView view, int scrollState) {
            }

            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
                int[] location = new int[2];
                header.getLocationOnScreen(location);
                float alpha = (float) location[1] / -300.0f;
                Log.i(TAG, "onScroll: " + alpha);
                if (alpha <= 1.0f) {
                    findViewById(R.id.title_bar).setBackgroundColor(Color.argb((int) (0xff * alpha), 0xea, 0xea, 0xea));
                    if (alpha >= 0.4f) {
                        if (isLight) {
                            ((ImageView) findViewById(R.id.back_icon)).setImageResource(R.drawable.ic_back);
                            ((TextView) findViewById(R.id.title_text)).setTextColor(getResources().getColor(R.color.black));
                            isLight = false;
                        }
                        header.findViewById(R.id.header_bar).setAlpha(0.0f);
                        findViewById(R.id.title_bar_divider).setVisibility(View.VISIBLE);
                    } else if (alpha < 0.4f) {
                        float a = (0.4f - alpha) / 0.4f;
                        header.findViewById(R.id.header_bar).setAlpha(a);
                        if (!isLight) {
                            ((ImageView) findViewById(R.id.back_icon)).setImageResource(R.drawable.ic_back_white);
                            ((TextView) findViewById(R.id.title_text)).setTextColor(getResources().getColor(R.color.white));
                            findViewById(R.id.title_bar_divider).setVisibility(View.GONE);
                            isLight = true;
                        }
                    }
                } else {
                    findViewById(R.id.title_bar).setBackgroundColor(Color.argb(0xff, 0xea, 0xea, 0xea));
                }

                if (location[1] < 0) {
                    ApplicationUtil.setMiuiStatusBarDarkMode(NewsActivity.this, true);
                    return;
                }
                ApplicationUtil.setMiuiStatusBarDarkMode(NewsActivity.this, false);
            }
        });
    }

    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.btn_back: {
                super.onBackPressed();
                return;
            }
            case R.id.error_refresh: {
                mPresenter.startPresent();
                break;
            }
        }
    }

    private int getHeaderIconId(String newsType) {
        switch (newsType) {
            case "头条":
                return R.drawable.ic_headline_l;
            case "社会":
                return R.drawable.ic_society_l;
            case "科技":
                return R.drawable.ic_technology_l;
            case "体育":
                return R.drawable.ic_sport_l;
            case "娱乐":
                return R.drawable.ic_fun_l;
            case "时尚":
                return R.drawable.ic_fashion_l;
            case "军事":
                return R.drawable.ic_military_l;
            case "国内":
                return R.drawable.ic_china_l;
            case "国际":
                return R.drawable.ic_internation_l;
            default:
                return 0;
        }
    }

    private int getNewsIconId(String newsType) {
        switch (newsType) {
            case "头条":
                return R.drawable.ic_headline;
            case "社会":
                return R.drawable.ic_society;
            case "科技":
                return R.drawable.ic_technology;
            case "体育":
                return R.drawable.ic_sport;
            case "娱乐":
                return R.drawable.ic_fun;
            case "时尚":
                return R.drawable.ic_fashion;
            case "军事":
                return R.drawable.ic_military;
            case "国内":
                return R.drawable.ic_china;
            case "国际":
                return R.drawable.ic_internation;
            default:
                return 0;
        }
    }

    private int getNewsDescription(String newsType) {
        switch (newsType) {
            case "头条":
                return R.string.top_description;
            case "社会":
                return R.string.shehui_description;
            case "科技":
                return R.string.keji_description;
            case "体育":
                return R.string.tiyu_description;
            case "娱乐":
                return R.string.yule_description;
            case "时尚":
                return R.string.shishang_description;
            case "军事":
                return R.string.junshi_description;
            case "国内":
                return R.string.guonei_description;
            case "国际":
                return R.string.guoji_description;
            default:
                return 0;
        }
    }


    private String getNewsChannel(String newsType) {
        for (int i = 0; i < mChannels.length; i++) {
            if (newsType.equals(mChannels[i])) {
                return mChannelsEn[i];
            }
        }
        return "top";
    }

    protected void finalize() throws Throwable {
        super.finalize();
    }

    @Override
    protected void onStop() {
        super.onStop();
    }

    protected void onDestroy() {
        super.onDestroy();
        try {
            mBitmapCache.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
